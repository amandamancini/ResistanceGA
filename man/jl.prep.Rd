% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/julia_prep.R
\name{jl.prep}
\alias{jl.prep}
\title{Prepare and bundle input CIRCUITSCAPE model parameters to run in Julia}
\usage{
jl.prep(n.Pops, 
response, 
CS_Point.File, 
covariates = NULL,
JULIA_HOME,
Neighbor.Connect, 
pairs_to_include, 
platform, 
parallel, 
cores,
cholmod,
precision, 
run_test,
write.files = NULL,
write.criteria = NULL,
silent = TRUE,
Julia_link = 'JuliaCall',
scratch = NULL,
rm.files = TRUE)
}
\arguments{
\item{n.Pops}{The number of populations that are being assessed}

\item{response}{Vector of pairwise genetic distances (lower half of pairwise matrix). Not necessary if only executing Julia run.}

\item{CS_Point.File}{Provide a \code{\link[sp]{SpatialPoints}} object containing sample locations. Alternatively, specify the path to the Circuitscape formatted point file. See Circuitscape documentation for help.}

\item{covariates}{Data frame of additional covariates that you want included in the MLPE model during opitmization.}

\item{JULIA_HOME}{Path to the folder containing the Julia binary (See Details)}

\item{Neighbor.Connect}{Select 4 or 8 to designate the connection scheme to use in CIRCUITSCAPE (Default = 8)}

\item{pairs_to_include}{Default is NULL. If you wish to use the advanced CIRCUITSCAPE setting mode to include or exclude certain pairs of sample locations, provide the path to the properly formatted "pairs_to_include.txt" file here. Currently only "include" method is supported.}

\item{parallel}{(Logical; Default = FALSE) Do you want to run CIRCUITSCAPE in parallel?}

\item{cores}{If `parallel = TRUE`, how many cores should be used for parallel processing?}

\item{cholmod}{(Logical; Default = TRUE). Should the cholmod solver be used? See details.}

\item{precision}{(Logical; Default = FALSE). Should experimental single precision method be used? See details.}

\item{run_test}{(Logical; Default = TRUE). Should a test of Julia Circuitscape be conducted? (This can take several seconds to complete)}

\item{write.files}{(Default = NULL). If a directory is specified, then the .ini and .asc files used in the CS.jl run will be exported.}

\item{write.criteria}{Criteria for writing .ini and .asc files. If a time in seconds is not specified, then all files will be written if a \code{write.files} directory is specified.}

\item{silent}{(Default = TRUE) No updates or logging of CIRCUITSCAPE will occur. May be useful to set to FALSE to debug.}

\item{Julia_link}{Specify whether R should connect to Julia using the 'JuliaCall' package (Default), or the 'XRJulia' package}

\item{scratch}{Scratch directory for use if write access is limited.}

\item{rm.files}{Should all temporary files be removed after Julia run (Default = TRUE)}
}
\value{
An R object that is a required input into optimization functions
}
\description{
This function will prepare objects needed for running optimization functions
}
\details{
This function requires that Julia is properly installed on your system. Upon first running of this function, the Circuitscape.jl library will be downloaded and tested. (see https://github.com/Circuitscape/Circuitscape.jl for more details). This may take some time.

Using \code{cholmod} (see https://github.com/Circuitscape/Circuitscape.jl)
"The cholesky decomposition is a direct solver method, unlike the algebraic multigrid method used by default in both the old and the new version. The advantage with this new direct method is that it can be much faster than the iterative solution, within a particular problem size. 
Word of caution: The cholesky decomposition is not practical to use beyond a certain problem size because of phenomenon called fill-in, which results in loss of sparsity and large memory consumption."
The cholmod solver can only be used when \code{precision} `= FALSE` (double precision).

If \code{precision} is TRUE, then the EXPERIMENTAL single precision method will be used. Single precision usually uses less memory, but is likely to reduce accuracy. NOTE: Preliminary testing of single precision mode in a Windows pc resulted in extremely slow runs.

\code{JULIA_HOME} is where the Julia binary files are stored. Usually in a `bin` directory within the Julia install directory.
}
\author{
Bill Peterman <Bill.Peterman@gmail.com>
}
